pipeline
{
	agent any
	options { timestamps () }
	stages
	{
		stage('Starting the build-my-app, job will run in a single workspace')
		{
			agent
			{
				node
				{
					label 'built-in'
					customWorkspace "/var/jenkins_home/workspace/${JOB_NAME}-${BUILD_NUMBER}"
				}
			}
			stages
			{
				stage('')
				{
					steps
					{
						script
						{
							checkout([$class: 'GitSCM', 
									branches: [[name: "main"]],
									doGenerateSubmoduleConfigurations: false,
									extensions: [
										[$class: 'DisableRemotePoll'],
										[$class: 'CleanBeforeCheckout'],
										[$class: 'CleanCheckout'],
										[$class: 'LocalBranch', localBranch: "main"],
										[$class: 'RelativeTargetDirectory', relativeTargetDir: "$WORKSPACE"],
										[$class: 'CloneOption', timeout: 5],
										[$class: 'CheckoutOption', timeout: 5],
									],
									userRemoteConfigs: [[credentialsId: 'mronen-github', url: 'https://github.com/mosheronen/docker-exercise.git']]])
						}
					}
				}
				stage('Create hosts file')
				{
					steps
					{
						script
						{
								writeFile file: 'hosts', text: """[local]
localhost.localdomain"""
						}
					}
				}
				stage('Run my-app')
				{
					steps
					{
						script
						{
							ansiblePlaybook become: true, installation: 'Ansible', inventory: 'hosts', playbook: 'my-app/my-app-playbook.yaml'
						}
					}
				}
			}
		}
	}
	post
	{
		always
		{
			cleanWs()
			dir("${WORKSPACE}")
			{
				deleteDir()
			}
			dir("${WORKSPACE}@tmp")
			{
				deleteDir()
			}
			dir("${WORKSPACE}@script")
			{
				deleteDir()
			}
			dir("/var/jenkins_home/workspace/${JOB_NAME}-${BUILD_NUMBER}")
			{
				deleteDir()
			}
			dir("/var/jenkins_home/workspace/${JOB_NAME}-${BUILD_NUMBER}@tmp")
			{
				deleteDir()
			}
			dir("/var/jenkins_home/workspace/${JOB_NAME}-${BUILD_NUMBER}@script")
			{
				deleteDir()
			}
		}
	}
}


def run_command(command)
{
	echo "[runCommand:command] ${command}"

	def stdoutFile = "rc.${BUILD_NUMBER}.out"
	command = command + " >> " + stdoutFile + " 2>&1"
	echo "[runCommand:actual command] ${command}"

	def res = [:]
	res["exitCode"] = sh(returnStatus: true, script: command)
	res["stdout"] = sh(returnStdout: true, script: "cat " + stdoutFile)

	sh(returnStatus: true, script: "rm -f " + stdoutFile)

	echo "[runCommand:response] ${res}"
	return res
}
